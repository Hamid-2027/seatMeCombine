const express = require('express');

const BUS_SCHEDULES_COLLECTION = 'busSchedules';

// Define ScheduleStatus and SeatStatus enums
const ScheduleStatus = {
  ON_TIME: 'ON_TIME',
  DELAYED: 'DELAYED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

const SeatStatus = {
  AVAILABLE: 'AVAILABLE',
  BOOKED: 'BOOKED',
  RESERVED: 'RESERVED',
  BLOCKED: 'BLOCKED'
};

// Sample Data for BusSchedules based on the new interface
const sampleBusSchedules = [
  {
    // id is removed, will be auto-generated by Firestore
    routeId: 'route1',
    companyId: 'company1',
    departureTime: '2024-07-26T09:00:00Z',
    arrivalTime: '2024-07-26T17:00:00Z',
    busId: 'bus1',
    driverId: 'driver201',
    fare: 1500,
    currency: 'PKR',
    status: ScheduleStatus.ON_TIME,
    availableSeats: 30,
    amenities: ['WiFi', 'AC', 'Refreshments'],
    seatLayout: {
      layoutId: 'layout_2x2_standard',
      name: 'Standard 2x2 Layout',
      rows: 10,
      columns: 4,
      layout: {
        "row0": ['1A', '1B', '', '1C', '1D'],
        "row1": ['2A', '2B', '', '2C', '2D'],
        "row2": ['3A', '3B', '', '3C', '3D'],
      },
      seats: [
        { id: 's1_1A', seatNumber: '1A', row: 0, column: 0, type: 'window', price: 1500, currency: 'PKR', isHandicapped: false, status: SeatStatus.AVAILABLE },
        { id: 's1_1B', seatNumber: '1B', row: 0, column: 1, type: 'aisle', price: 1500, currency: 'PKR', isHandicapped: false, status: SeatStatus.AVAILABLE },
        { id: 's1_1C', seatNumber: '1C', row: 0, column: 3, type: 'aisle', price: 1500, currency: 'PKR', isHandicapped: false, status: SeatStatus.BOOKED, gender: 'MALE', passengerId: 'passenger123' },
        { id: 's1_1D', seatNumber: '1D', row: 0, column: 4, type: 'window', price: 1500, currency: 'PKR', isHandicapped: false, status: SeatStatus.AVAILABLE },
      ]
    }
  },
  {
    // id is removed, will be auto-generated by Firestore
    routeId: 'route2',
    companyId: 'company2',
    departureTime: '2024-07-27T14:00:00Z',
    arrivalTime: '2024-07-27T19:30:00Z',
    busId: 'bus2',
    driverId: 'driver202',
    fare: 1200,
    currency: 'PKR',
    status: ScheduleStatus.ON_TIME,
    availableSeats: 25,
    amenities: ['WiFi', 'AC', 'Charging Ports', 'Blankets'],
    seatLayout: {
      layoutId: 'layout_2x1_sleeper',
      name: 'Sleeper 2x1 Layout',
      rows: 8,
      columns: 3,
      layout: {
        "row0": ['1A', '', '1B'],
        "row1": ['2A', '', '2B'],
      },
      seats: [
        { id: 's2_1A', seatNumber: '1A', row: 0, column: 0, type: 'lower', price: 1800, currency: 'PKR', isHandicapped: false, status: SeatStatus.AVAILABLE },
        { id: 's2_1B', seatNumber: '1B', row: 0, column: 2, type: 'lower', price: 1800, currency: 'PKR', isHandicapped: false, status: SeatStatus.RESERVED },
        { id: 's2_2A', seatNumber: '2A', row: 1, column: 0, type: 'upper', price: 1800, currency: 'PKR', isHandicapped: true, status: SeatStatus.AVAILABLE },
        { id: 's2_2B', seatNumber: '2B', row: 1, column: 2, type: 'upper', price: 1800, currency: 'PKR', isHandicapped: false, status: SeatStatus.BOOKED, gender: 'FEMALE', passengerId: 'passenger456' },
      ]
    }
  }
];

module.exports = function(admin, populateInitialData) {
    const router = express.Router();

    // Create a new bus schedule
    router.post('/', async (req, res) => {
        try {
            const scheduleData = req.body;
            // Enhanced validation for the new structure
            const requiredFields = ['routeId', 'companyId', 'departureTime', 'arrivalTime', 'busId', 'fare', 'seatLayout'];
            if (requiredFields.some(field => !scheduleData[field])) {
                return res.status(400).json({ error: `Missing one or more required fields: ${requiredFields.join(', ')}` });
            }
            if (typeof scheduleData.seatLayout !== 'object' || !scheduleData.seatLayout.layoutId || !Array.isArray(scheduleData.seatLayout.seats)) {
                return res.status(400).json({ error: 'Invalid seatLayout structure provided.' });
            }
            // The 'add' method automatically generates a new document ID
            const docRef = await admin.firestore().collection(BUS_SCHEDULES_COLLECTION).add(scheduleData);
            // Return the new schedule's data, including the auto-generated ID
            res.status(201).json({ id: docRef.id, ...scheduleData });
        } catch (error) {
            console.error(`Error creating bus schedule: ${error.message}`, error);
            res.status(500).json({ error: error.message });
        }
    });

    // Get all bus schedules
    router.get('/', async (req, res) => {
        try {
            const snapshot = await admin.firestore().collection(BUS_SCHEDULES_COLLECTION).get();
            const schedules = [];
            snapshot.forEach(doc => {
                schedules.push({
                    id: doc.id,
                    ...doc.data()
                });
            });
            res.json(schedules);
        } catch (error) {
            console.error(`Error fetching bus schedules: ${error.message}`, error);
            res.status(500).json({ error: error.message });
        }
    });

    // Get a specific bus schedule by ID
    router.get('/:id', async (req, res) => {
        try {
            const scheduleId = req.params.id;
            const doc = await admin.firestore().collection(BUS_SCHEDULES_COLLECTION).doc(scheduleId).get();
            if (!doc.exists) {
                return res.status(404).json({ error: 'Schedule not found' });
            }
            res.json({ id: doc.id, ...doc.data() });
        } catch (error) {
            console.error(`Error fetching bus schedule ${req.params.id}: ${error.message}`, error);
            res.status(500).json({ error: error.message });
        }
    });

    // Update a bus schedule by ID
    router.put('/:id', async (req, res) => {
        try {
            const scheduleId = req.params.id;
            const scheduleData = req.body;
            // Enhanced validation for the new structure
            const requiredFields = ['routeId', 'companyId', 'departureTime', 'arrivalTime', 'busId', 'fare', 'seatLayout'];
            if (requiredFields.some(field => !scheduleData[field])) {
                return res.status(400).json({ error: `Missing one or more required fields: ${requiredFields.join(', ')}` });
            }
            if (typeof scheduleData.seatLayout !== 'object' || !scheduleData.seatLayout.layoutId || !Array.isArray(scheduleData.seatLayout.seats)) {
                return res.status(400).json({ error: 'Invalid seatLayout structure provided.' });
            }
            await admin.firestore().collection(BUS_SCHEDULES_COLLECTION).doc(scheduleId).update(scheduleData);
            const updatedDoc = await admin.firestore().collection(BUS_SCHEDULES_COLLECTION).doc(scheduleId).get();
            res.json({ id: updatedDoc.id, ...updatedDoc.data() });
        } catch (error) {
            console.error(`Error updating bus schedule ${req.params.id}: ${error.message}`, error);
            res.status(500).json({ error: error.message });
        }
    });

    // Delete a bus schedule by ID
    router.delete('/:id', async (req, res) => {
        try {
            const scheduleId = req.params.id;
            await admin.firestore().collection(BUS_SCHEDULES_COLLECTION).doc(scheduleId).delete();
            res.status(200).json({ message: `Bus schedule ${scheduleId} deleted successfully` });
        } catch (error) {
            console.error(`Error deleting bus schedule ${req.params.id}: ${error.message}`, error);
            res.status(500).json({ error: error.message });
        }
    });

    return router;
};
